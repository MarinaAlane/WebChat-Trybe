<!doctype html>
<html>
  <head>
    <script src="http://localhost:3000/socket.io/socket.io.js"></script>
  </head>
  <body>
    <input data-testid="nickname-box" placeholder="Insira seu apelido" id="nickname-box" type="text">
    <button data-testid="nickname-button" id="nickname-button">Salvar</button>
    <h3>Usuários Conectados</h3>
    <ul id="users-online">
      
    </ul>

    <h3>Mensagems Trocadas</h3>
    <ul id="chat-message">
      
    </ul>
    <input data-testid="message-box" id='input-message' type="text">
    <button data-testid="send-button" id='send-message-button'>Enviar</button>

    <script>
      const socket = io("http://localhost:3000");
      
      //Lógica para enviar mensagem para o socket.io no backend
      // https://gist.github.com/6174/6062387
      // let newUserName = Math.random().toString(36).substring(2, 16) + Math.random().toString(36).substring(2, 7)
      let newUserName = '';
      const btnSendMessage = document.getElementById('send-message-button')
      const inputMessage = document.getElementById('input-message')
      btnSendMessage.addEventListener('click', () => {
        socket.emit('message', { chatMessage: inputMessage.value, nickname: newUserName } )
        inputMessage.value = ''
      })
      
      // Criando lógica para atualizar o nome do usuário
      const btnAddNickname = document.getElementById('nickname-button')
      const inputNickname = document.getElementById('nickname-box')
      btnAddNickname.addEventListener('click', () => {
        socket.emit('updateNickname', { newNickname: inputNickname.value } )
        newUserName = inputNickname.value
        inputNickname.value = ''
      })

      //Ouvindo as mensagen enviadas pelos clientes para poder criar o chat
      socket.on("message", (data) => {
        const li = document.createElement("li");
        const liText = document.createTextNode(
          `${data}`
        );
        li.appendChild(liText);
        const liDataTestId = document.createAttribute('data-testid')
        liDataTestId.value = 'message'
        li.setAttributeNode(liDataTestId)
        document.getElementById("chat-message").appendChild(li);
      });

      //enviar que um novo cliente entrou
      // socket.emit('newUserConnection', { nickname: newUserName })
      socket.emit('newUserConnection')

      // Ouve quando novos cliente se conectarem e faz lógicas com isso para renderizar somente o necessário
      socket.on("newUserConnection", (users) => {
        document.getElementById('users-online').innerHTML = ''
        const sortedUsers = [];
        users.forEach((user) => { // Lógica para arrumar o array de usuários para gerar as li onde o cliente deve se ver como first
          if (user.id === socket.id.substring(0, 16)) {
            newUserName = user.nickname
            sortedUsers.unshift(user.nickname)
          } else {
            sortedUsers.push(user.nickname)
          }
        })
        sortedUsers.map((user) => {
          const li = document.createElement("li");
          const liText = document.createTextNode(
            `${user}`
          );
          li.appendChild(liText);
          const liDataTestId = document.createAttribute('data-testid')
          liDataTestId.value = 'online-user'
          li.setAttributeNode(liDataTestId)
          document.getElementById("users-online").appendChild(li);
        })
      });
    </script>
  </body>
</html>