<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="/icons/yellow_chat.png">
  <link rel="stylesheet" href="/css/style.css">
  <title>webchat</title> 
</head>
<body>
  <div class="main">
    <section class="col sidebar">
      <section class="sidebar-header">
        <img class="logo" src="/icons/yellow_chat.png" alt=""/>
        <strong>Web Chat</strong>
      </section>
      <input id="nickname-input" data-testid="nickname-box" type="text" placeholder="troque de nickname aqui c:">
      <button id="nickname-btn" data-testid="nickname-button">change</button>
      <section id="user-card" class="sidebar-users" >
      </section>
    </section>
    <section id="chat" class="col chat">
      <!-- <ul id="messages"></ul> -->
      <div class="chat-input">
        <input id="chat-input" data-testid="message-box" type="text" placeholder="Digite sua mensagem aqui c:">
        <button id="chat-btn" data-testid="send-button" class="chat-btn">
          <img class="chat-btn chat-send-img" src="/icons/plane-message.png" alt=""/>
        </button>
      </div>
    </section>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // ta tudo um caos, tempo Ã© dinheiro...
    class OnlineUsers {
      // arquitetura observer
      // nao Ã© necessario nesse caso, mas eu quis implementar na mesmo pra brincar um pouco
      constructor() {
        this.observers = [];
        this.userCard = document.getElementById('user-card');
      };

      addObs(fnc) {
        this.observers.push(fnc);
      };

      notifyAllObs(option) {
        this.observers.forEach((fnc) => fnc(option));
      };
      //--

      delUser(id) {
        const user = document.getElementById(id);
        user.remove();
      };

      render(list) {
        list.forEach(({ userId, nickname }) => {
          const existingCard = document.getElementById(userId);
          if (!existingCard) {
            const userSection = document.createElement('section');
            const userImg = document.createElement('img');
            const userInfo = document.createElement('div');
            const userName = document.createElement('strong');
            const onlineTag = document.createElement('p');
            
            userSection.setAttribute('id', userId);
            userSection.setAttribute('class', 'user');
            userImg.setAttribute('class', 'user-img');
            userImg.setAttribute('src', '/icons/user.png');
            userInfo.setAttribute('class', 'user-info');
            userName.setAttribute('id', `nickname-id-${userId}`);
            userName.setAttribute('data-testid', 'online-user');
            userName.innerHTML = nickname.slice(0, 16);
            onlineTag.innerHTML = 'online';
            
            this.userCard.appendChild(userSection);
            userSection.appendChild(userImg);
            userSection.appendChild(userInfo);
            userInfo.appendChild(userName);
            userInfo.appendChild(onlineTag);
          };
          if (userId !== nickname) {
            const userName = document.getElementById(`nickname-id-${userId}`);
            userName.innerHTML = nickname;
          }
        });
      };
    };

  const socket = io();
  const onlineUsers = new OnlineUsers();
  let currentNickname

  onlineUsers.addObs((list) => {
    onlineUsers.render(list);
  });

  const nicknameButton = document.getElementById('nickname-btn');
  nicknameButton.addEventListener('click', () => {
    const nicknameInput = document.getElementById('nickname-input').value;
    if (!nicknameInput) return;
    currentNickname = nicknameInput;
    socket.emit('change-nickname', { nickname: nicknameInput, userId: socket.id });
    const input = document.getElementById('nickname-input');
    input.value = null;
  });

  const chatButton = document.getElementById('chat-btn');
  chatButton.addEventListener('click', () => {
    const chatInput = document.getElementById('chat-input').value;
    if (!chatInput) return;
    socket.emit('message', { chatMessage: chatInput, nickname: currentNickname });
  });

  const createMessage = (message, id) => {
    const chat = document.getElementById('chat');
    const messageLi = document.createElement('li');
    messageLi.setAttribute('data-testid', 'message');
    messageLi.setAttribute('id', id);

    messageLi.innerText = message;
    chat.appendChild(messageLi);
    window.scrollTo(0, document.body.scrollHeight);
    const input = document.getElementById('chat-input');
    input.value = null;
  };

  const showMeFirst = (list, id) => {
    if (list.length === 1) return list;

    let newList = list;
    let meiIndex;
    newList.forEach(({userId}, index) => {
      if (userId === id) meiIndex = index;
    });

    if (meiIndex === 0) return list;
    let temp = newList[0];

    newList[0] = newList[meiIndex];
    newList[meiIndex] = temp;
    return newList;
  };

  socket.on('connect', () => {
    console.log('new user', socket.id);
    currentNickname = socket.id;
  });

  socket.on('render-online-users', (list) => {
    const newList = showMeFirst(list, socket.id);
    onlineUsers.notifyAllObs(newList);
  });

  socket.on('render-chat-messages', (messages) => {
    let idGen = 0;
    messages.forEach(({ message: chatMessage, nickname, timestamp }) => {
      const existingMsg = document.getElementById(`${timestamp}-${idGen}`);
      if (!existingMsg) {
        createMessage(`${timestamp} - ${nickname}: ${chatMessage}`, `${timestamp}-${idGen}`);
        idGen++;
      }
    })
  }) 

  socket.on('del-user', (id) => {
    console.log('del user', id);
    onlineUsers.delUser(id);
  });

  socket.on('message', (message) => {
    createMessage(message)
  });
  </script>
</body>
</html>